

services:
  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
      - cluster.routing.allocation.disk.threshold_enabled=false
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    volumes:
      - ./elk-stack/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk-stack/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: security_incidents
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - elk
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/security_incidents?authSource=admin
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "5001:5000"
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_started
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_ELASTICSEARCH_URL=http://localhost:9200
      - REACT_APP_KIBANA_URL=http://localhost:5601
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - elk
    depends_on:
      - backend

  # ElastAlert
  elastalert:
    image: jertel/elastalert2:latest
    container_name: elastalert
    volumes:
      - ./elk-stack/elastalert/config.yaml:/opt/elastalert/config.yaml:ro
      - ./elk-stack/elastalert/rules:/opt/elastalert/rules:ro
      - elastalert_data:/opt/elastalert/elastalert_data
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: on-failure

  # Filebeat (Log Collector)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: filebeat
    user: root
    volumes:
      - ./elk-stack/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log/docker:/var/log/docker:ro
      - /var/log/syslog:/var/log/syslog:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_started
    restart: on-failure

  # Auditbeat (System Audit)
# Using simplified auditbeat with only file_integrity module
  auditbeat-simple:
    image: docker.elastic.co/beats/auditbeat:8.11.0
    container_name: auditbeat-simple
    user: root
    volumes:
      - ./elk-stack/auditbeat/auditbeat-simple.yml:/usr/share/auditbeat/auditbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc:/host/etc:ro
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
    command: >
      bash -c "
        auditbeat modules disable auditd 2>/dev/null || true
        auditbeat modules disable system 2>/dev/null || true
        auditbeat modules enable file_integrity 2>/dev/null || true
        exec auditbeat -e -c /usr/share/auditbeat/auditbeat.yml -strict.perms=false
      "
    restart: on-failure

  # Packetbeat (Network Monitoring)
  packetbeat:
    image: docker.elastic.co/beats/packetbeat:8.11.0
    container_name: packetbeat
    user: root
    network_mode: host
    volumes:
      - ./elk-stack/packetbeat/packetbeat.yml:/usr/share/packetbeat/packetbeat.yml:ro
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on:
      elasticsearch:
        condition: service_healthy
    command: >
      packetbeat -e -c /usr/share/packetbeat/packetbeat.yml -strict.perms=false
      -E output.elasticsearch.hosts=["http://localhost:9200"]
      -E packetbeat.protocols.http.ports=[80,8080,8000,3000,5000,5001,8002,9200,5601]
      -E packetbeat.flows.enabled=true
      -E packetbeat.flows.timeout=30s
      -E packetbeat.flows.period=10s
    restart: on-failure

volumes:
  elasticsearch_data:
    driver: local
  mongodb_data:
    driver: local
  elastalert_data:
    driver: local

networks:
  elk:
    driver: bridge
